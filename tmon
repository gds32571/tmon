#!/usr/bin/env python3

# 1 Jul 2019 - gswann
# added function to dump recorded data when receiving an
# MQTT subscription tmon/dump
#
# 2 Jun 2019 - gswann
# program to monitor MQTT publications,
# shows:
# topic
# how much time has elapsed since last transmission,
# the largest gap between successive transmissions
# how many 1 minute periods the sensor has not responded after 660 seconds

#  you may need to :
# pip3 install paho-mqtt 

# adding remove topic code for test
# (to see if i like it)


version = "1.0.5"

debug = 0
if debug == 0:
   sleepval = 5
else:
   sleepval = 30    


#import pdb
import paho.mqtt.publish as publish
import paho.mqtt.client as mqtt
import socket
import sys
import time
from time import sleep
from datetime import datetime

myTopic2 = "tmon/dump"
myTopic3 = "tmon/remove"

myHostname = socket.gethostname()
# myHostname = "testhost"

if len(sys.argv) == 3:
   HAhost = sys.argv[1]
   myTopic = sys.argv[2]
   location = ""
elif myHostname == 'ha32163':	# the Villages
   myTopic = 'rtl433/#'
   HAhost = 'ha32163'
   location = "Villages"
elif myHostname == 'kitchen':	# Pensacola
   myTopic = 'rtl433/#'
   HAhost = 'ha32571'
   location = "Pace"
elif myHostname == 'ha32571':	# Pensacola
   myTopic = 'rtl433/#'
   HAhost = 'ha32571'
   location = "Pace"
elif myHostname == 'rp1':	# Villages Living Room
   myTopic = 'ha/#'
   HAhost = 'rp1'
   location = "VillagesLR"
else:
    print("Program requires MQTT server name and")
    print("  subscription string") 
    print("  Like:")
    print("  ./tmon mqtthost esp/#") 
    sys.exit()

print("My Home Assistant (MQTT) host = " + HAhost)

a = {}

################################################
def on_connect(client, userdata, rc, flags):
    print("Connected with result code "+str(rc))
    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe(myTopic)
    print("Subscribing to " + myTopic)
    client.subscribe(myTopic2)
    print("Subscribing to " + myTopic2)
    client.subscribe(myTopic3)
    print("Subscribing to " + myTopic3)

################################################
# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    global a,start,myTopic2
    
    if msg.topic == myTopic2:
       print (myTopic2)
       dump_data()
    elif(msg.topic == myTopic3):
#       pdb.set_trace()
       try:
          print("Removing " + str(msg.payload))
          a.pop(msg.payload.decode('utf-8'))
       except:
          print("No match")
    else:
       myTopic   = msg.topic
       myPayload = msg.payload
       myTime = round(time.time(),1)
       if myTopic in a.keys():
          myPrev = a[myTopic][2]
          myCtr = a[myTopic][3]
       else:
          myPrev = 0    
          myCtr = 0   
       a[myTopic] = [myPayload,myTime,myPrev,myCtr]

######################################
client = mqtt.Client()
client.username_pw_set('hass', password='hass')
client.on_connect = on_connect
client.on_message = on_message
client.connect_async(HAhost, 1883, 60)

#   client.loop_forever()
client.loop_start()

print("Version: " + version)

start = time.time()

oldmin = datetime.now().minute - 1
myGo = time.time() + 60

######################################
def dump_data():
      global myTopic

      timestr = time.strftime("%Y%m%d-%H%M%S")
      #print timestr
 
#      import pdb; pdb.set_trace()
      print("Dumping data")

      # convert some characters
      myTopic3 = myTopic.replace("#","#-")
      myTopic3 = myTopic3.replace("*","-")
      myTopic3 = myTopic3.replace("/","-") 
      fn = myTopic3 + timestr + ".dat"

      print(fn)

      f = open(fn,'w')

      f.write("tmon version " + version + "\n")
      f.write("myTopic: ")
      f.write(myTopic)
      f.write("\n")
      
      f.write("Runtime: ")
      f.write(str(curtime))
      f.write("\n")

      for b in a.keys():
         print(str(a[b]))
         f.write(b)
         f.write(":\n")
         for c in range(0,4):
           f.write(str(a[b][c]))
           f.write(" ")
         f.write("\n")
      f.close()


######################################
while(True):

   try:
      sleep(sleepval)
      now = round(time.time(),1)
      if myGo <= time.time():
         myGo = myGo + 60.0
         for b in a.keys():

            if (now - a[b][1]) > a[b][2]:
               a[b][2] = round(now-a[b][1],1)

#            if (now-a[b][1] ) > 180:
            if (now-a[b][1] ) > 240:
               a[b][3] = a[b][3] + 1
   
   except KeyboardInterrupt:
      print('keyboard interrupt - saving data')
      dump_data()
      exit()

   else:

      for b in a.keys():
         if (now - a[b][1]) > a[b][2]:
            a[b][2] = round(now-a[b][1],1)

      curtime = int(round(now - start,0))
      # sort the data array using data
      # similar to a dict object but not the same
      #                    x[1][1] is the time at MQTT receive  
      c = sorted(a.items(),key = lambda x:(x[1][1]) )

      print('\033[37;40;0m')
      print("_"*63)
      print('{:<17s}{:<18s}{:>8s}{:>10s}{:>10s}'.format('tmon-'+version,'runtime ', 'Seconds','Max','Minutes'))
      print('{:<17s}{:>7d}{:>19s}{:>10s}{:>10s}'.format(location + ' Topic',curtime,'since','seconds','late'))
      for x in range(0,len(c)):
         print ('\033[33;40;1m{:<35s}\033[0m'.format(c[x][0]),end='')
         print('{:>8.1f}'.format(round(now-c[x][1][1],1)),end='')
         print('{:>10.1f}'.format(c[x][1][2]),end='')

         if c[x][1][3] > 0:
            print('\033[31m',end='')
            print('{:>10d}'.format(c[x][1][3]),end='')
            print('\033[0m',end='')
         else:   
            print('{:>10d}'.format(c[x][1][3]),end='')

         print('\033[0m') 
      print

